openapi: 3.0.0
info:
  description: "This is the documentation for users_declensions API"
  version: "0.1"
  title: "Users Declensions"
tags:
  - name: "people"
    description: "Managing people"
paths:
  /people:
    get:
      tags:
        - "people"
      responses:
        200:
          description: Returns people
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/person"
    post:
      tags:
        - "people"
      summary: "Add a new person"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/person_form'
      responses:
        200:
          description: "Returns created object"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/person'
        400:
          description: "Contains json with errors messages"
  /people/{personId}:
    get:
      tags:
        - "people"
      summary: "Find person by ID"
      description: "Returns a single person"
      parameters:
        - name: "personId"
          in: "path"
          description: "ID of person to return"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/person'
        404:
          description: "person not found"
    patch:
      tags:
        - "people"
      summary: "Updates a person in the with form data"
      parameters:
        - name: "personId"
          in: "path"
          description: "ID of person to return"
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/person_form'
      responses:
        200:
          description: "Returns created object"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/person'
        400:
          description: "Bad request. Contains json with errors messages"
        404:
          description: "Person not found"
    delete:
      tags:
        - "people"
      summary: "Deletes a person"
      parameters:
        - name: "personId"
          in: "path"
          description: "ID of person to return"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: "Success. Returns empty body"
        400:
          description: "Bad request. Contains json with errors messages"
        404:
          description: "Person not found"
components:
  schemas:
    person_form:
      type: "object"
      required:
        - "first_name"
      properties:
        first_name:
          type: "string"
          example: "Сергей"
        last_name:
          type: "string"
          example: "Иванов"
        middle_name:
          type: "string"
          example: "Семёнович"
        sex:
          type: "string"
          enum:
            - "male"
            - "female"
    person:
      type: "object"
      required:
        - "first_name"
      properties:
        id:
          type: "integer"
          format: "int64"
        first_name:
          type: "string"
          example: "Сергей"
        last_name:
          type: "string"
          example: "Иванов"
        middle_name:
          type: "string"
          example: "Семёнович"
        full_name:
          type: "string"
          description: "Concatenated last_name first_name and middle_name"
          example: "Иванов Сергей Семёнович"
        sex:
          type: "string"
          enum:
            - "male"
            - "female"
        sex_name:
          type: "string"
          description: "Translated sex name"
          example: "Мужской"
        declensions:
          type: "array"
          items:
            $ref: "#/components/schemas/declension"
    declension:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        person_id:
          type: "integer"
          format: "int64"
          description: "Person ID this object belongs to"
        name_case:
          type: "string"
          description: "Translated case name"
          example: "родительный"
        first_name:
          type: "string"
          example: "Сергея"
        last_name:
          type: "string"
          example: "Иванова"
        middle_name:
          type: "string"
          example: "Семёновича"
        full_name:
          type: "string"
          description: "Concatenated last_name first_name and middle_name"
          example: "Иванова Сергея Семёновича"

